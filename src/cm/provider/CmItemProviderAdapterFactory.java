/**
 */
package cm.provider;

import cm.util.CmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CmItemProviderAdapterFactory extends CmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborationRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborationRoleItemProvider collaborationRoleItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborationRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborationRoleAdapter() {
		if (collaborationRoleItemProvider == null) {
			collaborationRoleItemProvider = new CollaborationRoleItemProvider(this);
		}

		return collaborationRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.SharedObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedObjectItemProvider sharedObjectItemProvider;

	/**
	 * This creates an adapter for a {@link cm.SharedObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedObjectAdapter() {
		if (sharedObjectItemProvider == null) {
			sharedObjectItemProvider = new SharedObjectItemProvider(this);
		}

		return sharedObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.Tool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolItemProvider toolItemProvider;

	/**
	 * This creates an adapter for a {@link cm.Tool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToolAdapter() {
		if (toolItemProvider == null) {
			toolItemProvider = new ToolItemProvider(this);
		}

		return toolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborativeActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeActivityItemProvider collaborativeActivityItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborativeActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeActivityAdapter() {
		if (collaborativeActivityItemProvider == null) {
			collaborativeActivityItemProvider = new CollaborativeActivityItemProvider(this);
		}

		return collaborativeActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.Workspace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkspaceItemProvider workspaceItemProvider;

	/**
	 * This creates an adapter for a {@link cm.Workspace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkspaceAdapter() {
		if (workspaceItemProvider == null) {
			workspaceItemProvider = new WorkspaceItemProvider(this);
		}

		return workspaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.LocationRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationRelationshipItemProvider locationRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link cm.LocationRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationRelationshipAdapter() {
		if (locationRelationshipItemProvider == null) {
			locationRelationshipItemProvider = new LocationRelationshipItemProvider(this);
		}

		return locationRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.UseRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UseRelationshipItemProvider useRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link cm.UseRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUseRelationshipAdapter() {
		if (useRelationshipItemProvider == null) {
			useRelationshipItemProvider = new UseRelationshipItemProvider(this);
		}

		return useRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.ParticipationRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParticipationRelationshipItemProvider participationRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link cm.ParticipationRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParticipationRelationshipAdapter() {
		if (participationRelationshipItemProvider == null) {
			participationRelationshipItemProvider = new ParticipationRelationshipItemProvider(this);
		}

		return participationRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborativeModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeModelItemProvider collaborativeModelItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborativeModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeModelAdapter() {
		if (collaborativeModelItemProvider == null) {
			collaborativeModelItemProvider = new CollaborativeModelItemProvider(this);
		}

		return collaborativeModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.BelongsRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BelongsRelationshipItemProvider belongsRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link cm.BelongsRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBelongsRelationshipAdapter() {
		if (belongsRelationshipItemProvider == null) {
			belongsRelationshipItemProvider = new BelongsRelationshipItemProvider(this);
		}

		return belongsRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.SharedRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedRelationshipItemProvider sharedRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link cm.SharedRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedRelationshipAdapter() {
		if (sharedRelationshipItemProvider == null) {
			sharedRelationshipItemProvider = new SharedRelationshipItemProvider(this);
		}

		return sharedRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.RoleMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleMappingItemProvider roleMappingItemProvider;

	/**
	 * This creates an adapter for a {@link cm.RoleMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleMappingAdapter() {
		if (roleMappingItemProvider == null) {
			roleMappingItemProvider = new RoleMappingItemProvider(this);
		}

		return roleMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborativeProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeProcessItemProvider collaborativeProcessItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborativeProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeProcessAdapter() {
		if (collaborativeProcessItemProvider == null) {
			collaborativeProcessItemProvider = new CollaborativeProcessItemProvider(this);
		}

		return collaborativeProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborativeActivityNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeActivityNodeItemProvider collaborativeActivityNodeItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborativeActivityNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeActivityNodeAdapter() {
		if (collaborativeActivityNodeItemProvider == null) {
			collaborativeActivityNodeItemProvider = new CollaborativeActivityNodeItemProvider(this);
		}

		return collaborativeActivityNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborativeActivityState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeActivityStateItemProvider collaborativeActivityStateItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborativeActivityState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeActivityStateAdapter() {
		if (collaborativeActivityStateItemProvider == null) {
			collaborativeActivityStateItemProvider = new CollaborativeActivityStateItemProvider(this);
		}

		return collaborativeActivityStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.Awareness} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AwarenessItemProvider awarenessItemProvider;

	/**
	 * This creates an adapter for a {@link cm.Awareness}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAwarenessAdapter() {
		if (awarenessItemProvider == null) {
			awarenessItemProvider = new AwarenessItemProvider(this);
		}

		return awarenessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.AwarenessKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AwarenessKindItemProvider awarenessKindItemProvider;

	/**
	 * This creates an adapter for a {@link cm.AwarenessKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAwarenessKindAdapter() {
		if (awarenessKindItemProvider == null) {
			awarenessKindItemProvider = new AwarenessKindItemProvider(this);
		}

		return awarenessKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborativeProcessEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeProcessEdgeItemProvider collaborativeProcessEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborativeProcessEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeProcessEdgeAdapter() {
		if (collaborativeProcessEdgeItemProvider == null) {
			collaborativeProcessEdgeItemProvider = new CollaborativeProcessEdgeItemProvider(this);
		}

		return collaborativeProcessEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.RoleElementOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleElementOperationItemProvider roleElementOperationItemProvider;

	/**
	 * This creates an adapter for a {@link cm.RoleElementOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleElementOperationAdapter() {
		if (roleElementOperationItemProvider == null) {
			roleElementOperationItemProvider = new RoleElementOperationItemProvider(this);
		}

		return roleElementOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.ElementOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementOperationItemProvider elementOperationItemProvider;

	/**
	 * This creates an adapter for a {@link cm.ElementOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementOperationAdapter() {
		if (elementOperationItemProvider == null) {
			elementOperationItemProvider = new ElementOperationItemProvider(this);
		}

		return elementOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.CollaborativeProtocolTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeProtocolTransitionItemProvider collaborativeProtocolTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link cm.CollaborativeProtocolTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeProtocolTransitionAdapter() {
		if (collaborativeProtocolTransitionItemProvider == null) {
			collaborativeProtocolTransitionItemProvider = new CollaborativeProtocolTransitionItemProvider(this);
		}

		return collaborativeProtocolTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.ModelList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelListItemProvider modelListItemProvider;

	/**
	 * This creates an adapter for a {@link cm.ModelList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelListAdapter() {
		if (modelListItemProvider == null) {
			modelListItemProvider = new ModelListItemProvider(this);
		}

		return modelListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cm.HapticIndicator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HapticIndicatorItemProvider hapticIndicatorItemProvider;

	/**
	 * This creates an adapter for a {@link cm.HapticIndicator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHapticIndicatorAdapter() {
		if (hapticIndicatorItemProvider == null) {
			hapticIndicatorItemProvider = new HapticIndicatorItemProvider(this);
		}

		return hapticIndicatorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (collaborationRoleItemProvider != null) collaborationRoleItemProvider.dispose();
		if (sharedObjectItemProvider != null) sharedObjectItemProvider.dispose();
		if (toolItemProvider != null) toolItemProvider.dispose();
		if (collaborativeActivityItemProvider != null) collaborativeActivityItemProvider.dispose();
		if (workspaceItemProvider != null) workspaceItemProvider.dispose();
		if (locationRelationshipItemProvider != null) locationRelationshipItemProvider.dispose();
		if (useRelationshipItemProvider != null) useRelationshipItemProvider.dispose();
		if (participationRelationshipItemProvider != null) participationRelationshipItemProvider.dispose();
		if (collaborativeModelItemProvider != null) collaborativeModelItemProvider.dispose();
		if (belongsRelationshipItemProvider != null) belongsRelationshipItemProvider.dispose();
		if (sharedRelationshipItemProvider != null) sharedRelationshipItemProvider.dispose();
		if (roleMappingItemProvider != null) roleMappingItemProvider.dispose();
		if (collaborativeProcessItemProvider != null) collaborativeProcessItemProvider.dispose();
		if (collaborativeActivityNodeItemProvider != null) collaborativeActivityNodeItemProvider.dispose();
		if (collaborativeActivityStateItemProvider != null) collaborativeActivityStateItemProvider.dispose();
		if (awarenessItemProvider != null) awarenessItemProvider.dispose();
		if (awarenessKindItemProvider != null) awarenessKindItemProvider.dispose();
		if (collaborativeProcessEdgeItemProvider != null) collaborativeProcessEdgeItemProvider.dispose();
		if (roleElementOperationItemProvider != null) roleElementOperationItemProvider.dispose();
		if (elementOperationItemProvider != null) elementOperationItemProvider.dispose();
		if (collaborativeProtocolTransitionItemProvider != null) collaborativeProtocolTransitionItemProvider.dispose();
		if (modelListItemProvider != null) modelListItemProvider.dispose();
		if (hapticIndicatorItemProvider != null) hapticIndicatorItemProvider.dispose();
	}

}
